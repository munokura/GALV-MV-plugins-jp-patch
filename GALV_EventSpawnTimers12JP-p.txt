/*:ja
 * @plugindesc v1.2 イベントのセルフスイッチ、スイッチ、変数で制御できる擬似タイマーが使えます。
 *
 * @author Galv - galvs-scripts.com
 *
 * @help
 * 翻訳:ムノクラ
 * https://fungamemake.com/
 * https://twitter.com/munokura/
 *
 * ---------------------------------------------------------------------------
 *   Galv イベント生成タイマー
 * ---------------------------------------------------------------------------
 * このプラグインを使用すると、イベントに複数の再発生タイマーを設定し、
 * タイマーが切れた時、スイッチ/セルフスイッチを変更できます。
 *
 * イベントタイマーを作成するだけでは、
 * タイマーが作動しているかどうかを確認し、
 * 指定した方法でスイッチを変更する必要があります。
 *
 * タイマーチェックは、イベントの移動ルートで行うことができます。
 * プレーヤーがイベントの範囲に入ると、スイッチ効果が有効になります。
 * これを行う理由は、
 * 多数のカウントダウンが同時に実行されることによる遅延を引き起こすことなく、
 * 多数のタイマーを存在させることができるようにするためです。
 *
 * タイマーチェックは、
 * ゲーム内のイベントタイマーの結果を確認し、
 * 有効にする必要がある時、
 * スクリプトを使用して行うこともできます。
 * ---------------------------------------------------------------------------
 *
 * ---------------------------------------------------------------------------
 *  移動ルートのスクリプト
 * ---------------------------------------------------------------------------
 *
 *       this.doTimer(switch,status,forceEnd);
 *
 * switch   = スイッチのID番号、または引用符で囲まれたセルフスイッチの文字
 * status   = オンにする場合はtrue、オフにする場合はfalse
 * forceEnd = true / false - これを使用すると、タイマーが起動し、
 *                           時間が残っていても終了します。
 *                           使用しない場合、省略できます。
 *
 * タイマーが作動しているかどうかを確認し、指定されたスイッチを制御して、
 * 移動ルートが属するイベントのオン/オフを切り替えるコマンドです。
 * このチェックが行われる頻度は、イベントの自律移動の'頻度'に依存します。
 *
 * 例:
 * this.doTimer("B",false);  // タイマーが切れたらセルフスイッチBをオフに
 * this.doTimer(5,true);     // タイマーが切れたらスイッチ5をオンに
 * this.doTimer(1,true,true); // 今すぐスイッチ1を強制的にオンに
 * ---------------------------------------------------------------------------
 *
 * ---------------------------------------------------------------------------
 *  イベントコマンドのスクリプト
 * ---------------------------------------------------------------------------
 *
 *       this.setSpawn(mapId,eventId,time);
 *
 * mapId    = イベントが存在するマップ。現在のマップには0を使用
 * eventId  = イベント。スクリプトを実行するイベントには0を使用
 * time     = タイマーが完了するまでの秒数
 *
 * このコマンドは、イベントのタイマーを作成します。
 * イベントにタイマーが存在する時、使用すると、
 * 最新の時刻が古い時刻を上書きします。
 *
 * 例:
 * this.setSpawn(12,5,80);  // マップ12のイベント5のタイマーを80秒に設定
 * this.setSpawn(0,0,30);   // このマップ、イベントのタイマーを30秒に設定
 * ---------------------------------------------------------------------------
 *
 *       this.doTimer(mapId,eventId,switch,status,forceEnd);
 *
 * mapId    = イベントが存在するマップ。現在のマップには0を使用
 * eventId  = イベント。スクリプトを実行するイベントには0を使用
 * switch   = スイッチのID番号、または引用符で囲まれたセルフスイッチの文字
 * status   = オンにする場合はtrue、オフにする場合はfalse
 * forceEnd = true / false - これを使用すると、タイマーが起動し、
 *                           時間が残っていても終了します。
 *                           使用しない場合、省略できます。
 *
 * このコマンドは、指定されたマップ上のイベントに対して、
 * タイマーが作動しているかどうかを確認し、
 * そのイベントのセルフスイッチ/スイッチをオン/オフにします。
 * イベントのタイマーをチェックして有効にする必要がある場合、使用できます。
 *
 * 例:
 * this.doTimer(4,7,"C",false);   // マップ4、イベント7、セルフスイッチCオフ
 * this.doTimer(0,2,9,true);      // このマップ、イベント2、スイッチ9オン
 * this.doTimer(0,2,9,true,true); // このマップ、イベント2、スイッチ9オン、
 *                                // タイマーを終了
 * ---------------------------------------------------------------------------
 *
 *       this.doMapTimers(mapId,switch,status,forceEnd);
 *
 * mapId    = イベントが存在するマップ。現在のマップには0を使用
 * switch   = スイッチのID番号、または引用符で囲まれたセルフスイッチの文字
 * status   = オンにする場合はtrue、オフにする場合はfalse
 * forceEnd = true / false - これを使用すると、タイマーが起動し、
 *                           時間が残っていても終了します。
 *                           使用しない場合、省略できます。
 *
 * このコマンドは、
 * マップで現在実行されている全てのイベントタイマーに対して行うこと以外は、
 * 上記のdoTimerコマンドと同じです。
 *
 * 例:
 * this.doMapTimers(2,"B",false);  // タイマーが期限切れになった時、
 *                                 // マップ2の全てのセルフスイッチBをオフに
 * ---------------------------------------------------------------------------
 *
 *       this.purgeEventTimers();              // 全タイマーを削除
 *
 *       this.purgeEventTimers(mapId);         // マップ上の全タイマーを削除
 *
 *       this.purgeEventTimers(mapId,eventId); // 指定イベントタイマーを削除
 *
 * このコマンドは、上記のようにタイマーを削除します。
 * ---------------------------------------------------------------------------
 *
 *        this.modEventTimers(mapId,eventId,amount); // 特定のタイマーを変更
 *
 *        this.modEventTimers(mapId,amount); // 指定マップ上の全タイマーを変更
 *
 *        this.modEventTimers(amount); // 全タイマーを変更
 *
 * mapId    = イベントが存在するマップ。現在のマップには0を使用
 * eventId  = イベント。スクリプトを実行するイベントには0を使用
 * amount   = タイマー変更分の時間（数値がプラスで増加、マイナスで減少）
 *
 * これらのコマンドは、指定されたタイマーの残り時間を変更します。
 *
 * 例:
 * this.modEventTimers(2,7,-10);  // マップ2、イベント7のタイマーを10秒減
 * this.modEventTimers(0,2);  // 現在のマップの全タイマーを2秒増
 * this.modEventTimers(-20);  // 全タイマーを20秒減
 *
 * ---------------------------------------------------------------------------
 *  制御変数のスクリプト
 * ---------------------------------------------------------------------------
 *
 *       this.respawnTime(mapId,eventId);
 *
 * mapId    = イベントが存在するマップ。現在のマップには0を使用
 * eventId  = イベント。スクリプトを実行するイベントには0を使用
 *
 * このコマンドは、イベントタイマーが残っている秒数を返します。
 * タイマーが存在しない場合は0を返します。
 * ---------------------------------------------------------------------------
 */
